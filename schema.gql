# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type RegisterClientResponse {
  url: String!
}

type CourierActivity {
  id: Float!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  messengers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: MessengerFilter = {}

    """Specify to sort results."""
    sorting: [MessengerSort!] = [{field: createdAt, direction: DESC}]
  ): CourierActivityMessengersConnection!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input MessengerFilter {
  and: [MessengerFilter!]
  or: [MessengerFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input MessengerSort {
  field: MessengerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MessengerSortFields {
  phone
  email
  createdAt
  updatedAt
  deletedAt
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type Messenger {
  id: Float!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  courierActivity: CourierActivity!
}

type ShipmentStatus {
  id: Float!
  name: String!
  status: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  shipments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: ShipmentFilter = {}

    """Specify to sort results."""
    sorting: [ShipmentSort!] = [{field: createdAt, direction: DESC}]
  ): ShipmentStatusShipmentsConnection!
}

input ShipmentFilter {
  and: [ShipmentFilter!]
  or: [ShipmentFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  packages: ShipmentFilterPackageFilter
}

input ShipmentFilterPackageFilter {
  and: [ShipmentFilterPackageFilter!]
  or: [ShipmentFilterPackageFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input ShipmentSort {
  field: ShipmentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ShipmentSortFields {
  createdAt
  updatedAt
  deletedAt
}

type Shipment {
  id: Float!
  comments: String
  price: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  warehouseShipment: WarehouseShipment!
  shipmentStatus: ShipmentStatus!
  messenger: Messenger
  packages(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: PackageFilter = {}

    """Specify to sort results."""
    sorting: [PackageSort!] = [{field: createdAt, direction: ASC}]
  ): ShipmentPackagesConnection
}

input PackageFilter {
  and: [PackageFilter!]
  or: [PackageFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  status: PackageFilterPackageStatusFilter
  client: PackageFilterClientFilter
  contact: PackageFilterContactFilter
  direction: PackageFilterDirectionFilter
  shipment: PackageFilterShipmentFilter
  evidences: PackageFilterEvidenceFilter
}

input PackageFilterPackageStatusFilter {
  and: [PackageFilterPackageStatusFilter!]
  or: [PackageFilterPackageStatusFilter!]
  status: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageFilterClientFilter {
  and: [PackageFilterClientFilter!]
  or: [PackageFilterClientFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageFilterContactFilter {
  and: [PackageFilterContactFilter!]
  or: [PackageFilterContactFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageFilterDirectionFilter {
  and: [PackageFilterDirectionFilter!]
  or: [PackageFilterDirectionFilter!]
  zipCode: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageFilterShipmentFilter {
  and: [PackageFilterShipmentFilter!]
  or: [PackageFilterShipmentFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageFilterEvidenceFilter {
  and: [PackageFilterEvidenceFilter!]
  or: [PackageFilterEvidenceFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageSort {
  field: PackageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PackageSortFields {
  guide
  clientId
  createdAt
  updatedAt
  deletedAt
}

type Direction {
  id: Float!
  street: String!
  neigthboorhood: String!
  municipality: String!
  state: String!
  externalNumber: String!
  internalNumber: String!
  zipCode: String!
  latitude: Float!
  longitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  shipment: Shipment!
  package: Package!
  warehouseShipments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: WarehouseShipmentFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseShipmentSort!] = [{field: createdAt, direction: ASC}]
  ): DirectionWarehouseShipmentsConnection!
}

input WarehouseShipmentFilter {
  and: [WarehouseShipmentFilter!]
  or: [WarehouseShipmentFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input WarehouseShipmentSort {
  field: WarehouseShipmentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehouseShipmentSortFields {
  createdAt
  updatedAt
  deletedAt
}

type WarehouseShipment {
  id: Float!
  instructions: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  contact: Contact!
  direction: Direction!
  client: Client!
  shipments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: ShipmentFilter = {}

    """Specify to sort results."""
    sorting: [ShipmentSort!] = [{field: createdAt, direction: DESC}]
  ): WarehouseShipmentShipmentsConnection!
}

type Contact {
  id: Float!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  packages: Package!
  warehouseShipments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: WarehouseShipmentFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseShipmentSort!] = [{field: createdAt, direction: ASC}]
  ): ContactWarehouseShipmentsConnection!
}

type PackageStatus {
  id: Float!
  status: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  packages(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: PackageFilter = {}

    """Specify to sort results."""
    sorting: [PackageSort!] = [{field: createdAt, direction: DESC}]
  ): PackageStatusPackagesConnection!
}

type Evidence {
  id: Float!
  personReceived: String!
  comments: String
  url: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  packages: Package!
}

type Package {
  id: Float!
  guide: String!
  weigth: Float!
  width: Float!
  heigth: Float!
  length: Float!
  clientId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  shipment: Shipment
  direction: Direction!
  contact: Contact!
  client: Client!
  status: PackageStatus!
  evidences(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: EvidenceFilter = {}

    """Specify to sort results."""
    sorting: [EvidenceSort!] = [{field: createdAt, direction: ASC}]
  ): PackageEvidencesConnection
}

input EvidenceFilter {
  and: [EvidenceFilter!]
  or: [EvidenceFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  packages: EvidenceFilterPackageFilter
}

input EvidenceFilterPackageFilter {
  and: [EvidenceFilterPackageFilter!]
  or: [EvidenceFilterPackageFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input EvidenceSort {
  field: EvidenceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EvidenceSortFields {
  createdAt
  updatedAt
  deletedAt
}

type Client {
  id: Float!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  packages: Package!
}

type Viewer {
  email: String!
  userId: Float!
  tenant: String!
  firstName: String
  lastName: String
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type ClientDeleteResponse {
  id: Float
  firstName: String
  lastName: String
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type ClientConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Client!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ClientAggregateGroupBy {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientCountAggregate {
  email: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ClientMinAggregate {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientMaxAggregate {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ClientAggregateResponse {
  groupBy: ClientAggregateGroupBy
  count: ClientCountAggregate
  min: ClientMinAggregate
  max: ClientMaxAggregate
}

type ContactDeleteResponse {
  id: Float
  firstName: String
  lastName: String
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ContactEdge {
  """The node containing the Contact"""
  node: Contact!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type ContactConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [ContactEdge!]!
}

type ContactAggregateGroupBy {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ContactCountAggregate {
  email: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ContactMinAggregate {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ContactMaxAggregate {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ContactWarehouseShipmentsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehouseShipment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DirectionDeleteResponse {
  id: Float
  street: String
  neigthboorhood: String
  municipality: String
  state: String
  externalNumber: String
  internalNumber: String
  zipCode: String
  latitude: Float
  longitude: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type DirectionEdge {
  """The node containing the Direction"""
  node: Direction!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type DirectionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [DirectionEdge!]!
}

type DirectionAggregateGroupBy {
  zipCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type DirectionCountAggregate {
  zipCode: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type DirectionMinAggregate {
  zipCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type DirectionMaxAggregate {
  zipCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type DirectionWarehouseShipmentsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehouseShipment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type Invoice {
  id: Float!
  socialReazon: String!
  rfc: String!
  street: String!
  neigthboorhood: String!
  municipality: String!
  state: String!
  externalNumber: Float!
  internalNumber: Float!
  zipCode: Float!
  taxRegimen: Float!
  cfdi: String!
  createAt: DateTime!
  updateAt: DateTime!
  deleteAt: DateTime
}

type InvoiceDeleteResponse {
  id: Float
  socialReazon: String
  rfc: String
  street: String
  neigthboorhood: String
  municipality: String
  state: String
  externalNumber: Float
  internalNumber: Float
  zipCode: Float
  taxRegimen: Float
  cfdi: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type InvoiceEdge {
  """The node containing the Invoice"""
  node: Invoice!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type InvoiceConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [InvoiceEdge!]!
}

type InvoiceAggregateGroupBy {
  rfc: String
  zipCode: Float
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type InvoiceCountAggregate {
  rfc: Int
  zipCode: Int
  createAt: Int
  updateAt: Int
  deleteAt: Int
}

type InvoiceSumAggregate {
  zipCode: Float
}

type InvoiceAvgAggregate {
  zipCode: Float
}

type InvoiceMinAggregate {
  rfc: String
  zipCode: Float
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type InvoiceMaxAggregate {
  rfc: String
  zipCode: Float
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
}

type MessengerDeleteResponse {
  id: Float
  firstName: String
  lastName: String
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type MessengerConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Messenger!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type MessengerAggregateGroupBy {
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type MessengerCountAggregate {
  phone: Int
  email: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type MessengerMinAggregate {
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type MessengerMaxAggregate {
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageHistory {
  id: Float!
  status: String!
  idPackage: Float!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type PackageHistoryDeleteResponse {
  id: Float
  status: String
  idPackage: Float
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageHistoryConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PackageHistory!]!
}

type PackageHistoryAggregateGroupBy {
  status: String
  idPackage: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageHistoryCountAggregate {
  status: Int
  idPackage: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type PackageHistorySumAggregate {
  idPackage: Float
}

type PackageHistoryAvgAggregate {
  idPackage: Float
}

type PackageHistoryMinAggregate {
  status: String
  idPackage: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageHistoryMaxAggregate {
  status: String
  idPackage: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ChangeStatusReponse {
  guide: String!
  statusId: Float!
}

type ChangePackageStatusResponseDTO {
  data: [ChangeStatusReponse!]!
}

type PackageDeleteResponse {
  id: Float
  guide: String
  weigth: Float
  width: Float
  heigth: Float
  length: Float
  clientId: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Package!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PackageAggregateGroupBy {
  guide: String
  clientId: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageCountAggregate {
  guide: Int
  clientId: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type PackageSumAggregate {
  clientId: Float
}

type PackageAvgAggregate {
  clientId: Float
}

type PackageMinAggregate {
  guide: String
  clientId: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageMaxAggregate {
  guide: String
  clientId: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageEvidencesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Evidence!]!
}

type ShipmentDeleteResponse {
  id: Float
  comments: String
  price: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Shipment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShipmentAggregateGroupBy {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentCountAggregate {
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ShipmentMinAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentMaxAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentPackagesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Package!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShipmentCourier {
  id: Float!
  shipmentId: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type ShipmentCourierDeleteResponse {
  id: Float
  shipmentId: Float
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentCourierConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ShipmentCourier!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShipmentCourierAggregateGroupBy {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentCourierCountAggregate {
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ShipmentCourierMinAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentCourierMaxAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentStatusDeleteResponse {
  id: Float
  name: String
  status: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentStatusConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ShipmentStatus!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShipmentStatusAggregateGroupBy {
  name: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentStatusCountAggregate {
  name: Int
  status: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type ShipmentStatusMinAggregate {
  name: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentStatusMaxAggregate {
  name: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type ShipmentStatusShipmentsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Shipment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PackageStatusDeleteResponse {
  id: Float
  status: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageStatusEdge {
  """The node containing the PackageStatus"""
  node: PackageStatus!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PackageStatusConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [PackageStatusEdge!]!
}

type PackageStatusAggregateGroupBy {
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageStatusCountAggregate {
  status: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type PackageStatusMinAggregate {
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageStatusMaxAggregate {
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PackageStatusPackagesConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Package!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehouseShipmentDeleteResponse {
  id: Float
  instructions: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WarehouseShipmentConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehouseShipment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehouseShipmentAggregateGroupBy {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WarehouseShipmentCountAggregate {
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type WarehouseShipmentMinAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WarehouseShipmentMaxAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type WarehouseShipmentShipmentsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Shipment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EvidenceDeleteResponse {
  id: Float
  personReceived: String
  comments: String
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type EvidenceConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Evidence!]!
}

type EvidenceAggregateGroupBy {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type EvidenceCountAggregate {
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type EvidenceMinAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type EvidenceMaxAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type User {
  id: Float!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
}

type RegisterUserResponse {
  url: String!
}

type UserDeleteResponse {
  id: Float
  firstName: String
  lastName: String
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [User!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserAggregateGroupBy {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserCountAggregate {
  email: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type UserMinAggregate {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserMaxAggregate {
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserAggregateResponse {
  groupBy: UserAggregateGroupBy
  count: UserCountAggregate
  min: UserMinAggregate
  max: UserMaxAggregate
}

type CourierActivityDeleteResponse {
  id: Float
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CourierActivityConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [CourierActivity!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CourierActivityAggregateGroupBy {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CourierActivityCountAggregate {
  name: Int
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type CourierActivityMinAggregate {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CourierActivityMaxAggregate {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CourierActivityMessengersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Messenger!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type Query {
  sayHello: String!
  client(
    """The id of the record to find."""
    id: ID!
  ): Client
  clients(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100}

    """Specify to filter the records returned."""
    filter: ClientFilter = {}

    """Specify to sort results."""
    sorting: [ClientSort!] = []
  ): ClientConnection!
  viewerClient: Viewer!
  clientAggregate(
    """Filter to find records to aggregate on"""
    filter: ClientAggregateFilter
  ): [ClientAggregateResponse!]!
  contact(
    """The id of the record to find."""
    id: ID!
  ): Contact
  contacts(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: ContactFilter = {}

    """Specify to sort results."""
    sorting: [ContactSort!] = []
  ): ContactConnection!
  direction(
    """The id of the record to find."""
    id: ID!
  ): Direction
  directions(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: DirectionFilter = {}

    """Specify to sort results."""
    sorting: [DirectionSort!] = []
  ): DirectionConnection!
  invoice(
    """The id of the record to find."""
    id: ID!
  ): Invoice
  invoices(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: InvoiceFilter = {}

    """Specify to sort results."""
    sorting: [InvoiceSort!] = []
  ): InvoiceConnection!
  messenger(
    """The id of the record to find."""
    id: ID!
  ): Messenger
  messengers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100}

    """Specify to filter the records returned."""
    filter: MessengerFilter = {}

    """Specify to sort results."""
    sorting: [MessengerSort!] = []
  ): MessengerConnection!
  viewerCourier: Viewer!
  packageHistory(
    """The id of the record to find."""
    id: ID!
  ): PackageHistory
  packageHistories(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100}

    """Specify to filter the records returned."""
    filter: PackageHistoryFilter = {}

    """Specify to sort results."""
    sorting: [PackageHistorySort!] = [{field: createdAt, direction: ASC}]
  ): PackageHistoryConnection!
  package(
    """The id of the record to find."""
    id: ID!
  ): Package
  packages(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: PackageFilter = {}

    """Specify to sort results."""
    sorting: [PackageSort!] = []
  ): PackageConnection!
  shipment(
    """The id of the record to find."""
    id: ID!
  ): Shipment
  shipments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: ShipmentFilter = {}

    """Specify to sort results."""
    sorting: [ShipmentSort!] = []
  ): ShipmentConnection!
  shipmentCourier(
    """The id of the record to find."""
    id: ID!
  ): ShipmentCourier
  shipmentCouriers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: ShipmentCourierFilter = {}

    """Specify to sort results."""
    sorting: [ShipmentCourierSort!] = []
  ): ShipmentCourierConnection!
  shipmentStatus(
    """The id of the record to find."""
    id: ID!
  ): ShipmentStatus
  shipmentStatuses(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: ShipmentStatusFilter = {}

    """Specify to sort results."""
    sorting: [ShipmentStatusSort!] = []
  ): ShipmentStatusConnection!
  packageStatus(
    """The id of the record to find."""
    id: ID!
  ): PackageStatus
  packageStatuses(
    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to filter the records returned."""
    filter: PackageStatusFilter = {}

    """Specify to sort results."""
    sorting: [PackageStatusSort!] = []
  ): PackageStatusConnection!
  warehouseShipment(
    """The id of the record to find."""
    id: ID!
  ): WarehouseShipment
  warehouseShipments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: WarehouseShipmentFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseShipmentSort!] = []
  ): WarehouseShipmentConnection!
  evidence(
    """The id of the record to find."""
    id: ID!
  ): Evidence
  evidences(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100}

    """Specify to filter the records returned."""
    filter: EvidenceFilter = {}

    """Specify to sort results."""
    sorting: [EvidenceSort!] = []
  ): EvidenceConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = [{field: createdAt, direction: DESC}]
  ): UserConnection!
  viewerUser: Viewer!
  userAggregate(
    """Filter to find records to aggregate on"""
    filter: UserAggregateFilter
  ): [UserAggregateResponse!]!
  courierActivity(
    """The id of the record to find."""
    id: ID!
  ): CourierActivity
  courierActivities(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 200}

    """Specify to filter the records returned."""
    filter: CourierActivityFilter = {}

    """Specify to sort results."""
    sorting: [CourierActivitySort!] = []
  ): CourierActivityConnection!
}

input ClientFilter {
  and: [ClientFilter!]
  or: [ClientFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  packages: ClientFilterPackageFilter
}

input ClientFilterPackageFilter {
  and: [ClientFilterPackageFilter!]
  or: [ClientFilterPackageFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ClientSort {
  field: ClientSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ClientSortFields {
  email
  createdAt
  updatedAt
  deletedAt
}

input ClientAggregateFilter {
  and: [ClientAggregateFilter!]
  or: [ClientAggregateFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input ContactFilter {
  and: [ContactFilter!]
  or: [ContactFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  packages: ContactFilterPackageFilter
}

input ContactFilterPackageFilter {
  and: [ContactFilterPackageFilter!]
  or: [ContactFilterPackageFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ContactSort {
  field: ContactSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ContactSortFields {
  email
  createdAt
  updatedAt
  deletedAt
}

input DirectionFilter {
  and: [DirectionFilter!]
  or: [DirectionFilter!]
  zipCode: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  package: DirectionFilterPackageFilter
  shipment: DirectionFilterShipmentFilter
}

input DirectionFilterPackageFilter {
  and: [DirectionFilterPackageFilter!]
  or: [DirectionFilterPackageFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DirectionFilterShipmentFilter {
  and: [DirectionFilterShipmentFilter!]
  or: [DirectionFilterShipmentFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DirectionSort {
  field: DirectionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DirectionSortFields {
  zipCode
  createdAt
  updatedAt
  deletedAt
}

input InvoiceFilter {
  and: [InvoiceFilter!]
  or: [InvoiceFilter!]
  rfc: StringFieldComparison
  zipCode: NumberFieldComparison
  createAt: DateFieldComparison
  updateAt: DateFieldComparison
  deleteAt: DateFieldComparison
}

input InvoiceSort {
  field: InvoiceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InvoiceSortFields {
  rfc
  zipCode
  createAt
  updateAt
  deleteAt
}

input PackageHistoryFilter {
  and: [PackageHistoryFilter!]
  or: [PackageHistoryFilter!]
  status: StringFieldComparison
  idPackage: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageHistorySort {
  field: PackageHistorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PackageHistorySortFields {
  status
  idPackage
  createdAt
  updatedAt
  deletedAt
}

input ShipmentCourierFilter {
  and: [ShipmentCourierFilter!]
  or: [ShipmentCourierFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShipmentCourierSort {
  field: ShipmentCourierSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ShipmentCourierSortFields {
  createdAt
  updatedAt
  deletedAt
}

input ShipmentStatusFilter {
  and: [ShipmentStatusFilter!]
  or: [ShipmentStatusFilter!]
  name: StringFieldComparison
  status: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input ShipmentStatusSort {
  field: ShipmentStatusSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ShipmentStatusSortFields {
  name
  status
  createdAt
  updatedAt
  deletedAt
}

input PackageStatusFilter {
  and: [PackageStatusFilter!]
  or: [PackageStatusFilter!]
  status: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  package: PackageStatusFilterPackageFilter
}

input PackageStatusFilterPackageFilter {
  and: [PackageStatusFilterPackageFilter!]
  or: [PackageStatusFilterPackageFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input PackageStatusSort {
  field: PackageStatusSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PackageStatusSortFields {
  status
  createdAt
  updatedAt
  deletedAt
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  email
  createdAt
  updatedAt
  deletedAt
}

input UserAggregateFilter {
  and: [UserAggregateFilter!]
  or: [UserAggregateFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CourierActivityFilter {
  and: [CourierActivityFilter!]
  or: [CourierActivityFilter!]
  name: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CourierActivitySort {
  field: CourierActivitySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CourierActivitySortFields {
  name
  createdAt
  updatedAt
  deletedAt
}

type Mutation {
  setPackagesOnClient(input: SetPackagesOnClientInput!): Client!
  removePackagesFromClient(input: RemovePackagesFromClientInput!): Client!
  updateOneClient(input: UpdateOneClientInput!): Client!
  updateManyClients(input: UpdateManyClientsInput!): UpdateManyResponse!
  deleteOneClient(input: DeleteOneClientInput!): ClientDeleteResponse!
  deleteManyClients(input: DeleteManyClientsInput!): DeleteManyResponse!
  registerClient(input: InputCreateClient!): RegisterClientResponse!
  setPackagesOnContact(input: SetPackagesOnContactInput!): Contact!
  addWarehouseShipmentsToContact(input: AddWarehouseShipmentsToContactInput!): Contact!
  setWarehouseShipmentsOnContact(input: SetWarehouseShipmentsOnContactInput!): Contact!
  removePackagesFromContact(input: RemovePackagesFromContactInput!): Contact!
  removeWarehouseShipmentsFromContact(input: RemoveWarehouseShipmentsFromContactInput!): Contact!
  createOneContact(input: CreateOneContactInput!): Contact!
  createManyContacts(input: CreateManyContactsInput!): [Contact!]!
  updateOneContact(input: UpdateOneContactInput!): Contact!
  updateManyContacts(input: UpdateManyContactsInput!): UpdateManyResponse!
  deleteOneContact(input: DeleteOneContactInput!): ContactDeleteResponse!
  deleteManyContacts(input: DeleteManyContactsInput!): DeleteManyResponse!
  setShipmentOnDirection(input: SetShipmentOnDirectionInput!): Direction!
  setPackageOnDirection(input: SetPackageOnDirectionInput!): Direction!
  addWarehouseShipmentsToDirection(input: AddWarehouseShipmentsToDirectionInput!): Direction!
  setWarehouseShipmentsOnDirection(input: SetWarehouseShipmentsOnDirectionInput!): Direction!
  removeShipmentFromDirection(input: RemoveShipmentFromDirectionInput!): Direction!
  removePackageFromDirection(input: RemovePackageFromDirectionInput!): Direction!
  removeWarehouseShipmentsFromDirection(input: RemoveWarehouseShipmentsFromDirectionInput!): Direction!
  createOneDirection(input: CreateOneDirectionInput!): Direction!
  createManyDirections(input: CreateManyDirectionsInput!): [Direction!]!
  updateOneDirection(input: UpdateOneDirectionInput!): Direction!
  updateManyDirections(input: UpdateManyDirectionsInput!): UpdateManyResponse!
  deleteOneDirection(input: DeleteOneDirectionInput!): DirectionDeleteResponse!
  deleteManyDirections(input: DeleteManyDirectionsInput!): DeleteManyResponse!
  createOneInvoice(input: CreateOneInvoiceInput!): Invoice!
  createManyInvoices(input: CreateManyInvoicesInput!): [Invoice!]!
  updateOneInvoice(input: UpdateOneInvoiceInput!): Invoice!
  updateManyInvoices(input: UpdateManyInvoicesInput!): UpdateManyResponse!
  deleteOneInvoice(input: DeleteOneInvoiceInput!): InvoiceDeleteResponse!
  deleteManyInvoices(input: DeleteManyInvoicesInput!): DeleteManyResponse!
  setCourierActivityOnMessenger(input: SetCourierActivityOnMessengerInput!): Messenger!
  removeCourierActivityFromMessenger(input: RemoveCourierActivityFromMessengerInput!): Messenger!
  updateOneMessenger(input: UpdateOneMessengerInput!): Messenger!
  updateManyMessengers(input: UpdateManyMessengersInput!): UpdateManyResponse!
  deleteOneMessenger(input: DeleteOneMessengerInput!): MessengerDeleteResponse!
  deleteManyMessengers(input: DeleteManyMessengersInput!): DeleteManyResponse!
  registerCourier(input: InputRegisterCourier!): RegisterClientResponse!
  createOnePackageHistory(input: CreateOnePackageHistoryInput!): PackageHistory!
  createManyPackageHistories(input: CreateManyPackageHistoriesInput!): [PackageHistory!]!
  updateOnePackageHistory(input: UpdateOnePackageHistoryInput!): PackageHistory!
  updateManyPackageHistories(input: UpdateManyPackageHistoriesInput!): UpdateManyResponse!
  deleteOnePackageHistory(input: DeleteOnePackageHistoryInput!): PackageHistoryDeleteResponse!
  deleteManyPackageHistories(input: DeleteManyPackageHistoriesInput!): DeleteManyResponse!
  setShipmentOnPackage(input: SetShipmentOnPackageInput!): Package!
  setDirectionOnPackage(input: SetDirectionOnPackageInput!): Package!
  setContactOnPackage(input: SetContactOnPackageInput!): Package!
  setClientOnPackage(input: SetClientOnPackageInput!): Package!
  setStatusOnPackage(input: SetStatusOnPackageInput!): Package!
  addEvidencesToPackage(input: AddEvidencesToPackageInput!): Package!
  setEvidencesOnPackage(input: SetEvidencesOnPackageInput!): Package!
  removeShipmentFromPackage(input: RemoveShipmentFromPackageInput!): Package!
  removeDirectionFromPackage(input: RemoveDirectionFromPackageInput!): Package!
  removeContactFromPackage(input: RemoveContactFromPackageInput!): Package!
  removeClientFromPackage(input: RemoveClientFromPackageInput!): Package!
  removeStatusFromPackage(input: RemoveStatusFromPackageInput!): Package!
  removeEvidencesFromPackage(input: RemoveEvidencesFromPackageInput!): Package!
  createOnePackage(input: CreateOnePackageInput!): Package!
  createManyPackages(input: CreateManyPackagesInput!): [Package!]!
  updateOnePackage(input: UpdateOnePackageInput!): Package!
  updateManyPackages(input: UpdateManyPackagesInput!): UpdateManyResponse!
  deleteOnePackage(input: DeleteOnePackageInput!): PackageDeleteResponse!
  deleteManyPackages(input: DeleteManyPackagesInput!): DeleteManyResponse!
  createDelivery(input: InputCreatePackage!): Package!
  changePackageStatus(input: InputChangePackageStatus!): ChangePackageStatusResponseDTO!
  createDeliveries(input: InputCreatePackages!): [Package!]!
  setWarehouseShipmentOnShipment(input: SetWarehouseShipmentOnShipmentInput!): Shipment!
  setShipmentStatusOnShipment(input: SetShipmentStatusOnShipmentInput!): Shipment!
  setMessengerOnShipment(input: SetMessengerOnShipmentInput!): Shipment!
  addPackagesToShipment(input: AddPackagesToShipmentInput!): Shipment!
  setPackagesOnShipment(input: SetPackagesOnShipmentInput!): Shipment!
  removeWarehouseShipmentFromShipment(input: RemoveWarehouseShipmentFromShipmentInput!): Shipment!
  removeShipmentStatusFromShipment(input: RemoveShipmentStatusFromShipmentInput!): Shipment!
  removeMessengerFromShipment(input: RemoveMessengerFromShipmentInput!): Shipment!
  removePackagesFromShipment(input: RemovePackagesFromShipmentInput!): Shipment!
  createOneShipment(input: CreateOneShipmentInput!): Shipment!
  createManyShipments(input: CreateManyShipmentsInput!): [Shipment!]!
  updateOneShipment(input: UpdateOneShipmentInput!): Shipment!
  updateManyShipments(input: UpdateManyShipmentsInput!): UpdateManyResponse!
  deleteOneShipment(input: DeleteOneShipmentInput!): ShipmentDeleteResponse!
  deleteManyShipments(input: DeleteManyShipmentsInput!): DeleteManyResponse!
  generateShipment(input: InputGenerateShipment!): Shipment!
  addPackageShipment(input: InputAddPackageShipment!): Shipment!
  assignCourierShipment(input: InputAssignCourier!): Shipment!
  openPackage(input: InputOpenPackage!): Shipment!
  closePackage(input: InputClosePackage!): Shipment!
  cancelPackage(input: InputCancelPackage!): Shipment!
  createOneShipmentCourier(input: CreateOneShipmentCourierInput!): ShipmentCourier!
  createManyShipmentCouriers(input: CreateManyShipmentCouriersInput!): [ShipmentCourier!]!
  updateOneShipmentCourier(input: UpdateOneShipmentCourierInput!): ShipmentCourier!
  updateManyShipmentCouriers(input: UpdateManyShipmentCouriersInput!): UpdateManyResponse!
  deleteOneShipmentCourier(input: DeleteOneShipmentCourierInput!): ShipmentCourierDeleteResponse!
  deleteManyShipmentCouriers(input: DeleteManyShipmentCouriersInput!): DeleteManyResponse!
  addShipmentsToShipmentStatus(input: AddShipmentsToShipmentStatusInput!): ShipmentStatus!
  setShipmentsOnShipmentStatus(input: SetShipmentsOnShipmentStatusInput!): ShipmentStatus!
  removeShipmentsFromShipmentStatus(input: RemoveShipmentsFromShipmentStatusInput!): ShipmentStatus!
  createOneShipmentStatus(input: CreateOneShipmentStatusInput!): ShipmentStatus!
  createManyShipmentStatuses(input: CreateManyShipmentStatusesInput!): [ShipmentStatus!]!
  updateOneShipmentStatus(input: UpdateOneShipmentStatusInput!): ShipmentStatus!
  updateManyShipmentStatuses(input: UpdateManyShipmentStatusesInput!): UpdateManyResponse!
  deleteOneShipmentStatus(input: DeleteOneShipmentStatusInput!): ShipmentStatusDeleteResponse!
  deleteManyShipmentStatuses(input: DeleteManyShipmentStatusesInput!): DeleteManyResponse!
  addPackagesToPackageStatus(input: AddPackagesToPackageStatusInput!): PackageStatus!
  setPackagesOnPackageStatus(input: SetPackagesOnPackageStatusInput!): PackageStatus!
  removePackagesFromPackageStatus(input: RemovePackagesFromPackageStatusInput!): PackageStatus!
  createOnePackageStatus(input: CreateOnePackageStatusInput!): PackageStatus!
  createManyPackageStatuses(input: CreateManyPackageStatusesInput!): [PackageStatus!]!
  updateOnePackageStatus(input: UpdateOnePackageStatusInput!): PackageStatus!
  updateManyPackageStatuses(input: UpdateManyPackageStatusesInput!): UpdateManyResponse!
  deleteOnePackageStatus(input: DeleteOnePackageStatusInput!): PackageStatusDeleteResponse!
  deleteManyPackageStatuses(input: DeleteManyPackageStatusesInput!): DeleteManyResponse!
  setContactOnWarehouseShipment(input: SetContactOnWarehouseShipmentInput!): WarehouseShipment!
  setDirectionOnWarehouseShipment(input: SetDirectionOnWarehouseShipmentInput!): WarehouseShipment!
  setClientOnWarehouseShipment(input: SetClientOnWarehouseShipmentInput!): WarehouseShipment!
  addShipmentsToWarehouseShipment(input: AddShipmentsToWarehouseShipmentInput!): WarehouseShipment!
  setShipmentsOnWarehouseShipment(input: SetShipmentsOnWarehouseShipmentInput!): WarehouseShipment!
  removeContactFromWarehouseShipment(input: RemoveContactFromWarehouseShipmentInput!): WarehouseShipment!
  removeDirectionFromWarehouseShipment(input: RemoveDirectionFromWarehouseShipmentInput!): WarehouseShipment!
  removeClientFromWarehouseShipment(input: RemoveClientFromWarehouseShipmentInput!): WarehouseShipment!
  removeShipmentsFromWarehouseShipment(input: RemoveShipmentsFromWarehouseShipmentInput!): WarehouseShipment!
  createOneWarehouseShipment(input: CreateOneWarehouseShipmentInput!): WarehouseShipment!
  createManyWarehouseShipments(input: CreateManyWarehouseShipmentsInput!): [WarehouseShipment!]!
  updateOneWarehouseShipment(input: UpdateOneWarehouseShipmentInput!): WarehouseShipment!
  updateManyWarehouseShipments(input: UpdateManyWarehouseShipmentsInput!): UpdateManyResponse!
  deleteOneWarehouseShipment(input: DeleteOneWarehouseShipmentInput!): WarehouseShipmentDeleteResponse!
  deleteManyWarehouseShipments(input: DeleteManyWarehouseShipmentsInput!): DeleteManyResponse!
  createWarehouseShipment(input: InputCreateWarehouseShipment!): WarehouseShipment!
  setPackagesOnEvidence(input: SetPackagesOnEvidenceInput!): Evidence!
  removePackagesFromEvidence(input: RemovePackagesFromEvidenceInput!): Evidence!
  createOneEvidence(input: CreateOneEvidenceInput!): Evidence!
  createManyEvidences(input: CreateManyEvidencesInput!): [Evidence!]!
  updateOneEvidence(input: UpdateOneEvidenceInput!): Evidence!
  updateManyEvidences(input: UpdateManyEvidencesInput!): UpdateManyResponse!
  deleteOneEvidence(input: DeleteOneEvidenceInput!): EvidenceDeleteResponse!
  deleteManyEvidences(input: DeleteManyEvidencesInput!): DeleteManyResponse!
  updateOneUser(input: UpdateOneUserInput!): User!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  registerUser(input: InputRegisterUser!): RegisterUserResponse!
  addMessengersToCourierActivity(input: AddMessengersToCourierActivityInput!): CourierActivity!
  setMessengersOnCourierActivity(input: SetMessengersOnCourierActivityInput!): CourierActivity!
  removeMessengersFromCourierActivity(input: RemoveMessengersFromCourierActivityInput!): CourierActivity!
  createOneCourierActivity(input: CreateOneCourierActivityInput!): CourierActivity!
  createManyCourierActivities(input: CreateManyCourierActivitiesInput!): [CourierActivity!]!
  updateOneCourierActivity(input: UpdateOneCourierActivityInput!): CourierActivity!
  updateManyCourierActivities(input: UpdateManyCourierActivitiesInput!): UpdateManyResponse!
  deleteOneCourierActivity(input: DeleteOneCourierActivityInput!): CourierActivityDeleteResponse!
  deleteManyCourierActivities(input: DeleteManyCourierActivitiesInput!): DeleteManyResponse!
}

input SetPackagesOnClientInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemovePackagesFromClientInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input UpdateOneClientInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateClient!
}

input InputUpdateClient {
  firstName: String
  lastName: String
  phone: String
  email: String
}

input UpdateManyClientsInput {
  """Filter used to find fields to update"""
  filter: ClientUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateClient!
}

input ClientUpdateFilter {
  and: [ClientUpdateFilter!]
  or: [ClientUpdateFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneClientInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyClientsInput {
  """Filter to find records to delete"""
  filter: ClientDeleteFilter!
}

input ClientDeleteFilter {
  and: [ClientDeleteFilter!]
  or: [ClientDeleteFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input InputCreateClient {
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
}

input SetPackagesOnContactInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddWarehouseShipmentsToContactInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetWarehouseShipmentsOnContactInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemovePackagesFromContactInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveWarehouseShipmentsFromContactInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneContactInput {
  """The record to create"""
  contact: InputCreateContact!
}

input InputCreateContact {
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
}

input CreateManyContactsInput {
  """Array of records to create"""
  contacts: [InputCreateContact!]!
}

input UpdateOneContactInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateContact!
}

input InputUpdateContact {
  firstName: String
  lastName: String
  phone: String
  email: String
}

input UpdateManyContactsInput {
  """Filter used to find fields to update"""
  filter: ContactUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateContact!
}

input ContactUpdateFilter {
  and: [ContactUpdateFilter!]
  or: [ContactUpdateFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneContactInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyContactsInput {
  """Filter to find records to delete"""
  filter: ContactDeleteFilter!
}

input ContactDeleteFilter {
  and: [ContactDeleteFilter!]
  or: [ContactDeleteFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input SetShipmentOnDirectionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetPackageOnDirectionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddWarehouseShipmentsToDirectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetWarehouseShipmentsOnDirectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveShipmentFromDirectionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemovePackageFromDirectionInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveWarehouseShipmentsFromDirectionInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneDirectionInput {
  """The record to create"""
  direction: InputCreateDirection!
}

input InputCreateDirection {
  street: String!
  neigthboorhood: String!
  municipality: String!
  state: String!
  externalNumber: String!
  internalNumber: String = "0"
  zipCode: String!
  latitude: Float = 0
  longitude: Float = 0
}

input CreateManyDirectionsInput {
  """Array of records to create"""
  directions: [InputCreateDirection!]!
}

input UpdateOneDirectionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateDirection!
}

input InputUpdateDirection {
  street: String
  neigthboorhood: String
  municipality: String
  state: String
  externalNumber: String
  internalNumber: String
  zipCode: String
  latitude: Float
  longitude: Float
}

input UpdateManyDirectionsInput {
  """Filter used to find fields to update"""
  filter: DirectionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateDirection!
}

input DirectionUpdateFilter {
  and: [DirectionUpdateFilter!]
  or: [DirectionUpdateFilter!]
  zipCode: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneDirectionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyDirectionsInput {
  """Filter to find records to delete"""
  filter: DirectionDeleteFilter!
}

input DirectionDeleteFilter {
  and: [DirectionDeleteFilter!]
  or: [DirectionDeleteFilter!]
  zipCode: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input CreateOneInvoiceInput {
  """The record to create"""
  invoice: InputCreateInvoice!
}

input InputCreateInvoice {
  socialReazon: String!
  rfc: String!
  street: String!
  neigthboorhood: String!
  municipality: String!
  state: String!
  externalNumber: Float!
  internalNumber: Float!
  zipCode: Float!
  taxRegimen: Float!
  cfdi: String!
}

input CreateManyInvoicesInput {
  """Array of records to create"""
  invoices: [InputCreateInvoice!]!
}

input UpdateOneInvoiceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateInvoice!
}

input InputUpdateInvoice {
  socialReazon: String
  rfc: String
  street: String
  neigthboorhood: String
  municipality: String
  state: String
  externalNumber: Float
  internalNumber: Float
  zipCode: Float
  taxRegimen: Float
  cfdi: String
}

input UpdateManyInvoicesInput {
  """Filter used to find fields to update"""
  filter: InvoiceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateInvoice!
}

input InvoiceUpdateFilter {
  and: [InvoiceUpdateFilter!]
  or: [InvoiceUpdateFilter!]
  rfc: StringFieldComparison
  zipCode: NumberFieldComparison
  createAt: DateFieldComparison
  updateAt: DateFieldComparison
  deleteAt: DateFieldComparison
}

input DeleteOneInvoiceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyInvoicesInput {
  """Filter to find records to delete"""
  filter: InvoiceDeleteFilter!
}

input InvoiceDeleteFilter {
  and: [InvoiceDeleteFilter!]
  or: [InvoiceDeleteFilter!]
  rfc: StringFieldComparison
  zipCode: NumberFieldComparison
  createAt: DateFieldComparison
  updateAt: DateFieldComparison
  deleteAt: DateFieldComparison
}

input SetCourierActivityOnMessengerInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveCourierActivityFromMessengerInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input UpdateOneMessengerInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateMessenger!
}

input InputUpdateMessenger {
  firstName: String
  lastName: String
  phone: String
  email: String
}

input UpdateManyMessengersInput {
  """Filter used to find fields to update"""
  filter: MessengerUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateMessenger!
}

input MessengerUpdateFilter {
  and: [MessengerUpdateFilter!]
  or: [MessengerUpdateFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneMessengerInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyMessengersInput {
  """Filter to find records to delete"""
  filter: MessengerDeleteFilter!
}

input MessengerDeleteFilter {
  and: [MessengerDeleteFilter!]
  or: [MessengerDeleteFilter!]
  phone: StringFieldComparison
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input InputRegisterCourier {
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
}

input CreateOnePackageHistoryInput {
  """The record to create"""
  packageHistory: InputCreatePackageHistory!
}

input InputCreatePackageHistory {
  status: String!
  idPackage: Float!
  description: String!
}

input CreateManyPackageHistoriesInput {
  """Array of records to create"""
  packageHistories: [InputCreatePackageHistory!]!
}

input UpdateOnePackageHistoryInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdatePackageHistory!
}

input InputUpdatePackageHistory {
  status: String
  idPackage: Float
  description: String
}

input UpdateManyPackageHistoriesInput {
  """Filter used to find fields to update"""
  filter: PackageHistoryUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdatePackageHistory!
}

input PackageHistoryUpdateFilter {
  and: [PackageHistoryUpdateFilter!]
  or: [PackageHistoryUpdateFilter!]
  status: StringFieldComparison
  idPackage: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOnePackageHistoryInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPackageHistoriesInput {
  """Filter to find records to delete"""
  filter: PackageHistoryDeleteFilter!
}

input PackageHistoryDeleteFilter {
  and: [PackageHistoryDeleteFilter!]
  or: [PackageHistoryDeleteFilter!]
  status: StringFieldComparison
  idPackage: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input SetShipmentOnPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetDirectionOnPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetContactOnPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetClientOnPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetStatusOnPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddEvidencesToPackageInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetEvidencesOnPackageInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveShipmentFromPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveDirectionFromPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveContactFromPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveClientFromPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveStatusFromPackageInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveEvidencesFromPackageInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePackageInput {
  """The record to create"""
  package: InputCreatePackage!
}

input InputCreatePackage {
  weigth: Float = 1
  width: Float = 1
  heigth: Float = 1
  length: Float = 1
  guide: String!
  contact: InputCreateContact!
  direction: InputCreateDirection!
  idClient: Float!
}

input CreateManyPackagesInput {
  """Array of records to create"""
  packages: [InputCreatePackage!]!
}

input UpdateOnePackageInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdatePackage!
}

input InputUpdatePackage {
  weigth: Float!
  width: Float!
  heigth: Float!
  legth: Float!
}

input UpdateManyPackagesInput {
  """Filter used to find fields to update"""
  filter: PackageUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdatePackage!
}

input PackageUpdateFilter {
  and: [PackageUpdateFilter!]
  or: [PackageUpdateFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOnePackageInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPackagesInput {
  """Filter to find records to delete"""
  filter: PackageDeleteFilter!
}

input PackageDeleteFilter {
  and: [PackageDeleteFilter!]
  or: [PackageDeleteFilter!]
  guide: StringFieldComparison
  clientId: NumberFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input InputChangePackageStatus {
  update: [InputChangeStatus!]!
}

input InputChangeStatus {
  guide: String!
  statusId: Float!
  evidence: InputCreateEvidence
}

input InputCreateEvidence {
  personReceived: String!
  comments: String
  url: String!
}

input InputCreatePackages {
  packages: [InputCreatePackage!]!
}

input SetWarehouseShipmentOnShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetShipmentStatusOnShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetMessengerOnShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddPackagesToShipmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetPackagesOnShipmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveWarehouseShipmentFromShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveShipmentStatusFromShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveMessengerFromShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemovePackagesFromShipmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneShipmentInput {
  """The record to create"""
  shipment: InputCreateShipment!
}

input InputCreateShipment {
  comments: String!
  clientId: Float!
  direction: InputCreateDirection!
}

input CreateManyShipmentsInput {
  """Array of records to create"""
  shipments: [InputCreateShipment!]!
}

input UpdateOneShipmentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateShipment!
}

input InputUpdateShipment {
  comments: String
  messengerId: Float
  packages: [InputCreatePackage!]
}

input UpdateManyShipmentsInput {
  """Filter used to find fields to update"""
  filter: ShipmentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateShipment!
}

input ShipmentUpdateFilter {
  and: [ShipmentUpdateFilter!]
  or: [ShipmentUpdateFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneShipmentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyShipmentsInput {
  """Filter to find records to delete"""
  filter: ShipmentDeleteFilter!
}

input ShipmentDeleteFilter {
  and: [ShipmentDeleteFilter!]
  or: [ShipmentDeleteFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input InputGenerateShipment {
  comments: String!
  clientId: Float!
  warehouseShipmentId: Float!
}

input InputAddPackageShipment {
  shipmentId: Float!
  guides: [String!]!
}

input InputAssignCourier {
  courierId: Float!
  shipmentId: Float!
}

input InputOpenPackage {
  shipmentId: Float!
  packageId: Float!
}

input InputClosePackage {
  shipmentId: Float!
  packageId: Float!
  evidence: InputEvidence!
}

input InputEvidence {
  personReceived: String!
  comments: String
  url: String!
}

input InputCancelPackage {
  shipmentId: Float!
  packageId: Float!
  statusCancelation: Float!
  evidence: InputEvidence!
}

input CreateOneShipmentCourierInput {
  """The record to create"""
  shipmentCourier: InputCreateShipmentCourier!
}

input InputCreateShipmentCourier {
  shipmentId: Float!
}

input CreateManyShipmentCouriersInput {
  """Array of records to create"""
  shipmentCouriers: [InputCreateShipmentCourier!]!
}

input UpdateOneShipmentCourierInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateShipmentCourier!
}

input InputUpdateShipmentCourier {
  shipmentId: Float
}

input UpdateManyShipmentCouriersInput {
  """Filter used to find fields to update"""
  filter: ShipmentCourierUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateShipmentCourier!
}

input ShipmentCourierUpdateFilter {
  and: [ShipmentCourierUpdateFilter!]
  or: [ShipmentCourierUpdateFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneShipmentCourierInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyShipmentCouriersInput {
  """Filter to find records to delete"""
  filter: ShipmentCourierDeleteFilter!
}

input ShipmentCourierDeleteFilter {
  and: [ShipmentCourierDeleteFilter!]
  or: [ShipmentCourierDeleteFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddShipmentsToShipmentStatusInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetShipmentsOnShipmentStatusInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveShipmentsFromShipmentStatusInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneShipmentStatusInput {
  """The record to create"""
  shipmentStatus: InputCreateShipmentStatus!
}

input InputCreateShipmentStatus {
  name: String!
  status: String!
  description: String!
}

input CreateManyShipmentStatusesInput {
  """Array of records to create"""
  shipmentStatuses: [InputCreateShipmentStatus!]!
}

input UpdateOneShipmentStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateShipmentStatus!
}

input InputUpdateShipmentStatus {
  name: String
  description: String
  status: String
}

input UpdateManyShipmentStatusesInput {
  """Filter used to find fields to update"""
  filter: ShipmentStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateShipmentStatus!
}

input ShipmentStatusUpdateFilter {
  and: [ShipmentStatusUpdateFilter!]
  or: [ShipmentStatusUpdateFilter!]
  name: StringFieldComparison
  status: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneShipmentStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyShipmentStatusesInput {
  """Filter to find records to delete"""
  filter: ShipmentStatusDeleteFilter!
}

input ShipmentStatusDeleteFilter {
  and: [ShipmentStatusDeleteFilter!]
  or: [ShipmentStatusDeleteFilter!]
  name: StringFieldComparison
  status: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input AddPackagesToPackageStatusInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetPackagesOnPackageStatusInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemovePackagesFromPackageStatusInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePackageStatusInput {
  """The record to create"""
  packageStatus: InputCreatePackageStatus!
}

input InputCreatePackageStatus {
  status: String!
  description: String!
}

input CreateManyPackageStatusesInput {
  """Array of records to create"""
  packageStatuses: [InputCreatePackageStatus!]!
}

input UpdateOnePackageStatusInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdatePackageStatusDTO!
}

input InputUpdatePackageStatusDTO {
  status: String!
  description: String!
}

input UpdateManyPackageStatusesInput {
  """Filter used to find fields to update"""
  filter: PackageStatusUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdatePackageStatusDTO!
}

input PackageStatusUpdateFilter {
  and: [PackageStatusUpdateFilter!]
  or: [PackageStatusUpdateFilter!]
  status: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOnePackageStatusInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyPackageStatusesInput {
  """Filter to find records to delete"""
  filter: PackageStatusDeleteFilter!
}

input PackageStatusDeleteFilter {
  and: [PackageStatusDeleteFilter!]
  or: [PackageStatusDeleteFilter!]
  status: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input SetContactOnWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetDirectionOnWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetClientOnWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input AddShipmentsToWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetShipmentsOnWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveContactFromWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveDirectionFromWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveClientFromWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveShipmentsFromWarehouseShipmentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneWarehouseShipmentInput {
  """The record to create"""
  warehouseShipment: InputCreateWarehouseShipment!
}

input InputCreateWarehouseShipment {
  instructions: String!
  clientId: Float!
  direction: InputCreateDirection!
  contact: InputCreateContact!
}

input CreateManyWarehouseShipmentsInput {
  """Array of records to create"""
  warehouseShipments: [InputCreateWarehouseShipment!]!
}

input UpdateOneWarehouseShipmentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateWarehouseShipment!
}

input InputUpdateWarehouseShipment {
  instructions: String!
  direction: InputUpdateDirection!
  contact: InputUpdateContact!
}

input UpdateManyWarehouseShipmentsInput {
  """Filter used to find fields to update"""
  filter: WarehouseShipmentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateWarehouseShipment!
}

input WarehouseShipmentUpdateFilter {
  and: [WarehouseShipmentUpdateFilter!]
  or: [WarehouseShipmentUpdateFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneWarehouseShipmentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyWarehouseShipmentsInput {
  """Filter to find records to delete"""
  filter: WarehouseShipmentDeleteFilter!
}

input WarehouseShipmentDeleteFilter {
  and: [WarehouseShipmentDeleteFilter!]
  or: [WarehouseShipmentDeleteFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input SetPackagesOnEvidenceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemovePackagesFromEvidenceInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input CreateOneEvidenceInput {
  """The record to create"""
  evidence: InputCreateEvidence!
}

input CreateManyEvidencesInput {
  """Array of records to create"""
  evidences: [InputCreateEvidence!]!
}

input UpdateOneEvidenceInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateEvidence!
}

input InputUpdateEvidence {
  personReceived: String
  comments: String
  url: String
}

input UpdateManyEvidencesInput {
  """Filter used to find fields to update"""
  filter: EvidenceUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateEvidence!
}

input EvidenceUpdateFilter {
  and: [EvidenceUpdateFilter!]
  or: [EvidenceUpdateFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneEvidenceInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyEvidencesInput {
  """Filter to find records to delete"""
  filter: EvidenceDeleteFilter!
}

input EvidenceDeleteFilter {
  and: [EvidenceDeleteFilter!]
  or: [EvidenceDeleteFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateUser {
  id: Float
  firstName: String
  lastName: String
  phone: String
  email: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  or: [UserUpdateFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  or: [UserDeleteFilter!]
  email: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input InputRegisterUser {
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
}

input AddMessengersToCourierActivityInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetMessengersOnCourierActivityInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveMessengersFromCourierActivityInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOneCourierActivityInput {
  """The record to create"""
  courierActivity: InputCreateCourierActivity!
}

input InputCreateCourierActivity {
  name: String!
  description: String!
}

input CreateManyCourierActivitiesInput {
  """Array of records to create"""
  courierActivities: [InputCreateCourierActivity!]!
}

input UpdateOneCourierActivityInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: InputUpdateCourierActivity!
}

input InputUpdateCourierActivity {
  name: String!
  description: String!
}

input UpdateManyCourierActivitiesInput {
  """Filter used to find fields to update"""
  filter: CourierActivityUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: InputUpdateCourierActivity!
}

input CourierActivityUpdateFilter {
  and: [CourierActivityUpdateFilter!]
  or: [CourierActivityUpdateFilter!]
  name: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}

input DeleteOneCourierActivityInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyCourierActivitiesInput {
  """Filter to find records to delete"""
  filter: CourierActivityDeleteFilter!
}

input CourierActivityDeleteFilter {
  and: [CourierActivityDeleteFilter!]
  or: [CourierActivityDeleteFilter!]
  name: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
}
